generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("NEON_DATABASE_URI")
}

enum Visibility {
  PRIVATE
  PUBLIC
}

enum Role {
   system
   user
   admin
   assistant
   data
}

model User {
  id      String @id @default(uuid())
  name    String
  surname String

  // Project relationships
  ownedProjects     Project[] // Projects owned by this user
  conversations     Conversation[]
  assistantProjects Project[] @relation("ProjectAssistants") // Projects where user is an assistant
 
  @@map("users")
}

model Media {
  id        String   @id @default(uuid())
  projectId String
  name      String   @unique
  mime_type String
  data      Bytes

  // Project relationship
  project Project @relation("ProjectMedias", fields: [projectId], references: [id], onDelete: Cascade)

  @@map("media")
}

model Project {
  id          String   @id @default(uuid())
  name        String
  location    String
  description String?
  status      String   @default("active")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String

  // Media attachments
  media Media[] @relation("ProjectMedias")

  // Conversations in the project
  conversations Conversation[]

  // Access control
  assistants User[] @relation("ProjectAssistants")

  @@map("projects")
}

model Conversation {
  id         String     @id @default(uuid())
  projectId  String
  title      String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  lastReadAt DateTime?  @default(now())
  lastMessageAt DateTime?
  visibility Visibility @default(PRIVATE)

  project     Project   @relation(fields: [projectId], references: [id], map: "conversations_project_id_fkey")
  messages    Message[]  @relation("ConversationMessages")
  members     User[]

  @@index([projectId])
  @@map("conversations")
}

model Message {
  id             String   @id @default(uuid())
  conversationId String
  role           Role     @default(user)
  content        String?
  attachments    Json?
  createdAt      DateTime @default(now())

  conversation Conversation @relation("ConversationMessages", fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@map("messages")
}